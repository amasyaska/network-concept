HOURS SPENT: 3

NEXT COMMIT:


CLASSES:

# Node:
	The main structural element of the network.

# Hub:
Description:
	Container for Nodes that manipulates messages between nodes and organizes local addressing between them.
	Addressing: 
Attributes:
	container: container for nodes and their addresses. implemented as a vector of pairs.
	address_top: when we add new node, we increment address_top
Methods:	
	add_node()
	remove_node(): not implemented yet	


FUNCTIONS:

absent

PROBLEMS:
- how to identify every node of a network?
	when we are getting a task to send request, a problem arises: where? thus, we need to identify nodes somehow. I suggest to use addresses (amoa).
- do we have to set unique addresses for every node of a network? I think yes.

amoa ~ &

HIERARCHY:

				Node
			/			\
		Client				Server
			\			/
				P2PNode

IDEAS:
# 1 message_get method for node that will be invoked by Hub, and implementation of the method will be dependent on a class descendant () (amoa), so every different implementation of the method will be peculiar "message handler" &
# 2 Hub pointer field in Node class &
# 3 get_address method for Node class to get address if Node connected to Hub
# 4 is_connected_to_hub method for Node class to check if Node connected to Hub, throw exception otherwise in get_address &
# 5 Node Client will have method to send message, this method will call private method of Hub to send message between two Nodes &
# 6 Node Server will have method to get message, which will be called by Hub after getting message &, implementation #1
