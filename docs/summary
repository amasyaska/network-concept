HOURS SPENT: 5h 20min

NEXT COMMIT:
	Hub now is friend class for Node
	added exception throw to Node::get_hub_pointer
	updated documentation

CLASSES:

# Node:
Description:
	The main structural element of the network.
Attributes:
	hub_ptr:
Methods:
	get_hub_pointer(): returns hub_ptr
	set_hub_pointer(): sets hub_ptr

# Hub:
Description:
	Container for Nodes that manipulates messages between nodes and organizes local addressing between them.
	Send message methods return status codes.
	Addressing: 
Attributes:
	container: container for nodes and their addresses. implemented as a vector of pairs.
	address_top: when we add new node, we increment address_top
Methods:
	request_to_send_message_from_client_to_server(): for external use
	send_message_from_client_to_server(): for internal use
	add_node()
	remove_node(): not implemented yet

# NodeClient : Node
Description:
	Descendant of Node that implements ONLY client part (can ONLY send messages, and can't get them)

# NodeServer: Node 
Description:
	Descendant of Node that implements ONLY server part (can ONLY get messages, and can't send them)


FUNCTIONS:

absent

PROBLEMS:
- how to identify every node of a network?
	when we are getting a task to send request, a problem arises: where? thus, we need to identify nodes somehow. I suggest to use addresses (amoa).
- do we have to set unique addresses for every node of a network? I think yes.

amoa ~ &

HIERARCHY:

				Node
			/			\
		Client				Server
			\			/
				P2PNode

IDEAS:
# 1 message_get method for node that will be invoked by Hub, and implementation of the method will be dependent on a class descendant () (amoa), so every different implementation of the method will be peculiar "message handler" &
# 2 Hub pointer field in Node class &
# 3 get_address method for Node class to get address if Node connected to Hub
# 4 is_connected_to_hub method for Node class to check if Node connected to Hub, throw exception otherwise in get_address &
# 5 Node Client will have method to send message, this method will call private method of Hub to send message between two Nodes &
# 6 Node Server will have method to get message, which will be called by Hub after getting message &, implementation #1
# 7 Should we make Node, NodeClient and NodeServer abstract classes? (i think if every node could be whether ONLY server or ONLY client or both, it can lead to complications in understanding network (we will have to check if node is server to check if we can send message to it, ))
# 8 I think Hub should be superior to Node to simplify understanding & I mean, I guess we should say that Hub masters Node, but Node can't do nothing to Hub, can't change anything &. this way we won't expect any changes in Hub from Node &.
# 9 I think Node shouldn't use Hub's functionality, Hub is superior to Node, maybe implement this not as Node using Hub method, but making request to Hub to use this &
# 10 Add Hub pointer field for Node to save Hub which Node is connected to &
